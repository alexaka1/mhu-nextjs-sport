@import 'tailwindcss';
@import "uploadthing/tw/v4";
@source "../../node_modules/@uploadthing/react/dist";

@plugin "@tailwindcss/typography";
@plugin "daisyui" {
  themes: false;
  prefix: "dui-";
  /*styled: true;*/
  include: swap;
  logs: true;
  /*exclude: reset, properties, rootcolor, rootscrollgutter, rootscroolllock, scrollbar, svg;*/
}

@custom-variant dark (&:where(.dark, .dark *));
@custom-variant browser (@media (display-mode: browser));
@custom-variant standalone (@media (display-mode: standalone));

@custom-variant data-active (&[data-active="true"]);

@theme {
  --contrast-threshold: 0.6;            /* When base color’s lightness (l) is below this, text will be light (high contrast) */
  --min-contrast-lightness: 0;          /* Contrast lightness for light backgrounds (black text) */
  --max-contrast-lightness: 1;          /* Contrast lightness for dark backgrounds (white text) */
  --precision: 2;                      /* Number of decimal places to round numeric values */

  --color-primary: oklch(33.14% 0.1186 18.15);
  --color-primary-800: oklch(33.14% 0.1186 18.15);
  --color-primary-600: oklch(49.99% 0.183 18.06 );
  --color-primary-400: oklch(67.31% 0.1949 18.81);
  --color-primary-200: oklch(83.46% 0.0802 20.19);

  --color-hun-red: oklch(48.75% 0.184 20.24);
  --color-hun-green: oklch(57.26% 0.104 136.15);

  --color-secondary: oklch(41.85% 0.1658 25.77);
  --color-secondary-800: oklch(32.5% 0.129 25.77);
  --color-secondary-600: oklch(41.85% 0.1658 25.77);
  --color-secondary-400: oklch(66.5% 0.216 25.77);
  --color-secondary-200: oklch(83.2% 0.085 25.77);

  --color-accent: oklch(47.01% 0.1653 18.33);
  --color-accent-800: oklch(32.5% 0.115 18.33);
  --color-accent-600: oklch(47.01% 0.1653 18.33);
  --color-accent-400: oklch(66.5% 0.196 18.33);
  --color-accent-200: oklch(83.2% 0.077 18.33);
}

/*@theme inline {*/
/*  --font-sans: var(--font-geist-sans), var(--font-sans);*/
/*  --font-mono: var(--font-geist-mono), var(--font-mono);*/
/*}*/

/*
  Contrast utilities: the idea here is that the contrast color is computed
  via a CSS function (here using oklch() as in your old plugin), where
  <alpha-value> is automatically substituted when you use an opacity modifier.
*/
/*@utility text-bg-contrast {*/
/*  --tw-text-opacity: 1;*/
/*  !**/
/*    Here we use a CSS calculation that references custom properties*/
/*    (e.g. --tw-bg-l, --tw-lightness-threshold, etc.) which you should define*/
/*    in your base styles. Tailwind will replace <alpha-value> when you use classes like*/
/*    text-bg-contrast/50.*/
/*  *!*/
/*  color: oklch(*/
/*  clamp(0, calc(var(--tw-infinite) * (var(--tw-lightness-threshold) - var(--tw-bg-l) - var(--tw-bg-l-offset))), 1),*/
/*  0,*/
/*  0 / <alpha-value>*/
/*  );*/
/*}*/

/*@utility text-border-contrast {*/
/*  --tw-text-opacity: 1;*/
/*  color: oklch(*/
/*  clamp(0, calc(var(--tw-infinite) * (var(--tw-border-threshold) - var(--tw-border-l) - var(--tw-border-l-offset))), 1),*/
/*  0,*/
/*  0 / <alpha-value>*/
/*  );*/
/*}*/

/*@utility bg-border-contrast {*/
/*  --tw-bg-opacity: 1;*/
/*  background-color: oklch(*/
/*  clamp(0, calc(var(--tw-infinite) * (var(--tw-border-threshold) - var(--tw-border-l) - var(--tw-border-l-offset))), 1),*/
/*  0,*/
/*  0 / <alpha-value>*/
/*  );*/
/*}*/

@utility bg-* {
  /* Capture optional opacity modifier (e.g. the "50" in text-red-500/50) */
  --alpha: calc(--modifier(integer) * 1%);  /* Converts an integer modifier to a percentage&#8203;:contentReference[oaicite:10]{index=10} */
  /* Fetch the base color value (from theme --color-* variable or arbitrary [color]) */
  --tw-bg-color: --value(--color-*, [color]);

  /* Compute text color in OKLCH: use the base color’s chroma (c) and hue (h),
     but adjust lightness (l) for contrast. We invert the lightness around ~50% and
     clamp it between the min/max contrast lightness. */
  background-color: var(--tw-bg-color);
}

@utility text-contrast-* {
  /* Capture an optional alpha modifier (e.g. the “50” in text-red-500/50-contrast) */
  --alpha: --modifier([percentage]);
  /* Resolve the base color from theme or arbitrary value */
  --tw-contrast-base: --value(--color-*, [color]);

  /* Round the base color’s hue (h) to the given precision.
     If h is invalid (NaN), the fallback 0 is used.
     (This mimics the JS: if (Number.isNaN(h)) return "0".) */
  --tw-hue: round(h, var(--precision));

  color: --alpha(
    oklch(
      from var(--tw-contrast-base)
      calc(
        clamp(
          var(--min-contrast-lightness),
          var(--min-contrast-lightness)
          + (var(--max-contrast-lightness) - var(--min-contrast-lightness))
          * (1 - l / var(--contrast-threshold)),
          var(--max-contrast-lightness)
        )
      )
      c
        /* Use the rounded hue, falling back to 0 if necessary */
      var(--tw-hue, 0)
    )
    / var(--alpha, 100%)
  );
}

@utility text-bg-contrast {
  --alpha: --modifier([percentage]);
  /* Use the element’s background color as the base color */
  --tw-contrast-base: var(--tw-bg-color);
  --tw-hue: round(h, var(--precision));
  color: --alpha(
    oklch(
      from var(--tw-contrast-base)
      calc(
        clamp(
          var(--min-contrast-lightness),
          var(--min-contrast-lightness)
          + (var(--max-contrast-lightness) - var(--min-contrast-lightness))
          * (1 - l / var(--contrast-threshold)),
          var(--max-contrast-lightness)
        )
      )
      c
      var(--tw-hue, 0)
    )
    / var(--alpha, 100%)
  );
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}
